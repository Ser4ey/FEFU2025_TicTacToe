import React, { useState, useEffect } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';

function GameRoom({ user, onLogout }) {
  const { roomId } = useParams();
  const navigate = useNavigate();
  const [room, setRoom] = useState(null);
  const [game, setGame] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    fetchRoomData();
    const interval = setInterval(fetchRoomData, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é 1 —Å–µ–∫—É–Ω–¥—É
    return () => clearInterval(interval);
  }, [roomId]);

  const fetchRoomData = async () => {
    try {
      const response = await axios.get(`/api/rooms/${roomId}/`);
      setRoom(response.data);
      setGame(response.data.game);
      setError('');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã');
    } finally {
      setLoading(false);
    }
  };

  const handleCellClick = async (row, col) => {
    if (!game || game.status !== 'ongoing') return;
    if (game.board[row][col] !== '') return;
    
    //–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á–µ–π —Ö–æ–¥
    const isPlayerX = game.player_x.id === user.id;
    const isPlayerO = game.player_o.id === user.id;
    const isMyTurn = (isPlayerX && game.current_turn === 'X') || (isPlayerO && game.current_turn === 'O');
    
    if (!isMyTurn) return;

    try {
      const response = await axios.post(`/api/rooms/${roomId}/move/`, {
        row,
        col
      });
      setGame(response.data.game);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ —Ö–æ–¥–∞:', error);
      alert(error.response?.data?.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ —Ö–æ–¥–∞');
    }
  };

  const handleLeaveRoom = async () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É?')) {
      try {
        await axios.post(`/api/rooms/${roomId}/leave/`);
        navigate('/');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', error);
      }
    }
  };

  const getGameStatus = () => {
    if (!game) return '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...';
    
    switch (game.status) {
      case 'ongoing':
        const currentPlayer = game.current_turn === 'X' ? game.player_x : game.player_o;
        return `–•–æ–¥ –∏–≥—Ä–æ–∫–∞: ${currentPlayer.username} (${game.current_turn})`;
      case 'x_wins':
        return `üéâ –ü–æ–±–µ–¥–∏–ª ${game.player_x.username} (X)!`;
      case 'o_wins':
        return `üéâ –ü–æ–±–µ–¥–∏–ª ${game.player_o.username} (O)!`;
      case 'draw':
        return 'ü§ù –ù–∏—á—å—è!';
      default:
        return '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞';
    }
  };

  const isMyTurn = () => {
    if (!game || game.status !== 'ongoing') return false;
    const isPlayerX = game.player_x.id === user.id;
    const isPlayerO = game.player_o.id === user.id;
    return (isPlayerX && game.current_turn === 'X') || (isPlayerO && game.current_turn === 'O');
  };

  const getMySymbol = () => {
    if (!game) return '';
    return game.player_x.id === user.id ? 'X' : 'O';
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (error) {
    return (
      <div className="container">
        <div className="card">
          <h2>–û—à–∏–±–∫–∞</h2>
          <p>{error}</p>
          <Link to="/" className="btn btn-primary">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Link>
        </div>
      </div>
    );
  }

  return (
    <div>
      <header className="header">
        <div className="header-content">
          <h1>–ö–æ–º–Ω–∞—Ç–∞: {room?.name}</h1>
          <div className="header-actions">
            <Link to="/" className="btn btn-secondary">–ì–ª–∞–≤–Ω–∞—è</Link>
            <span>–ü—Ä–∏–≤–µ—Ç, {user.username}!</span>
            <button onClick={onLogout} className="btn btn-secondary">
              –í—ã–π—Ç–∏
            </button>
          </div>
        </div>
      </header>

      <div className="container">
        <div className="card">
          <div className="game-info">
            <h3>–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room?.code}</h3>
            
            {room && room.player_count < 2 ? (
              <div style={{ textAlign: 'center', padding: '2rem' }}>
                <h3>–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...</h3>
                <p>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã —Å –¥—Ä—É–≥–æ–º: <strong>{room.code}</strong></p>
              </div>
            ) : (
              <>
                <div className="players-info">
                  {game && (
                    <>
                      <div className={`player ${game.current_turn === 'X' ? 'active' : ''}`}>
                        <strong>{game.player_x.username}</strong> (X)
                        {game.player_x.id === user.id && ' - –í—ã'}
                      </div>
                      <div className={`player ${game.current_turn === 'O' ? 'active' : ''}`}>
                        <strong>{game.player_o.username}</strong> (O)
                        {game.player_o.id === user.id && ' - –í—ã'}
                      </div>
                    </>
                  )}
                </div>
                
                <div className="game-status">
                  {getGameStatus()}
                  {isMyTurn() && <div style={{ color: '#27ae60' }}>–í–∞—à —Ö–æ–¥!</div>}
                  {game && <div>–í—ã –∏–≥—Ä–∞–µ—Ç–µ –∑–∞: <strong>{getMySymbol()}</strong></div>}
                </div>
                
                {game && (
                  <div className="game-board">
                    {game.board.map((row, rowIndex) =>
                      row.map((cell, colIndex) => (
                        <button
                          key={`${rowIndex}-${colIndex}`}
                          className="game-cell"
                          onClick={() => handleCellClick(rowIndex, colIndex)}
                          disabled={!isMyTurn() || cell !== '' || game.status !== 'ongoing'}
                          style={{
                            cursor: isMyTurn() && cell === '' && game.status === 'ongoing' ? 'pointer' : 'default'
                          }}
                        >
                          {cell}
                        </button>
                      ))
                    )}
                  </div>
                )}
              </>
            )}
            
            <div style={{ textAlign: 'center', marginTop: '2rem' }}>
              <button onClick={handleLeaveRoom} className="btn btn-danger">
                –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
              </button>
              
              {game && game.status !== 'ongoing' && (
                <div style={{ marginTop: '1rem' }}>
                  <Link to="/" className="btn btn-primary" style={{ marginRight: '1rem' }}>
                    –ì–ª–∞–≤–Ω–∞—è
                  </Link>
                  <Link to="/rooms" className="btn btn-secondary">
                    –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
                  </Link>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default GameRoom;